---
- name: create redis working directory
  file:
    path: "{{ redis_dir }}"
    state: directory
    recurse: yes
    owner: "{{ redis_user }}"

- name: create redis init script
  template:
    src: "{{ item }}"
    dest: /etc/init.d/{{ redis_service_name }}
    mode: 0755
  with_first_found:
    - files:
      - Debian/redis.init.j2
      - default/redis.init.j2
      paths:
        - ../templates
  when: redis_as_service

- name: set redis to start at boot
  service:
    name: "{{ redis_service_name }}"
    enabled: yes
  when: redis_as_service

# Check then create log dir to prevent aggressively overwriting permissions
- name: check if log directory exists
  stat:
    path: "{{ redis_logfile|dirname }}"
  register: logdir
  changed_when: false
  when: redis_logfile != '""'

- name: create log directory if it does not exist
  file:
    state: directory
    path: "{{ redis_logfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_logfile != '""'
    - not logdir.stat.exists

- name: touch the log file
  file:
    state: touch
    path: "{{ redis_logfile }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when: redis_logfile != '""'

- name: check if pid directory exists
  stat:
    path: "{{ redis_pidfile|dirname }}"
  register: piddir
  changed_when: false
  when: redis_pidfile != '""'

- name: create pid directory if it does not exist
  file:
    state: directory
    path: "{{ redis_pidfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_pidfile != '""'
    - not piddir.stat.exists

- name: create redis config file
  template:
    src: redis.conf.j2
    dest: /etc/redis/{{ redis_port }}.conf
    owner: "{{ redis_user }}"
  notify: restart redis

- name: add redis init config file
  template:
    dest: /etc/default/{{ redis_service_name }}
    src: redis.init.conf.j2
    mode: 0600
  notify: restart redis

- name: flush handlers to apply config changes
  meta: flush_handlers

- name: ensure redis is running
  service:
    name: "{{ redis_service_name }}"
    state: started
  when: redis_as_service
